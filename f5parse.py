#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals
from grako.parsing import graken, Parser


__version__ = (2015, 8, 12, 14, 13, 19, 2)

__all__ = [
    'F5confParser',
    'F5confSemantics',
    'main'
]


class F5confParser(Parser):
    def __init__(self, whitespace=None, nameguard=None, **kwargs):
        super(F5confParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=None,
            eol_comments_re=None,
            ignorecase=None,
            **kwargs
        )

    @graken()
    def _keyword_(self):
        self._pattern(r'[a-zA-z#]*')

    @graken()
    def _name_(self):
        self._pattern(r'[a-zA-Z0-9._-]*')

    @graken()
    def _ip_(self):
        self._pattern(r'(?:[0-9]{1,3}\.){3}[0-9]{1,3}')

    @graken()
    def _net_(self):
        self._ip_()
        self._token('/')
        self._name_()

    @graken()
    def _integer_(self):
        self._pattern(r'[0-9]*')

    @graken()
    def _port_(self):
        self._pattern(r'[0-9]*')

    @graken()
    def _param_(self):
        self._pattern(r'[\*\:]')

    @graken()
    def _string_(self):
        self._token('"')
        self._pattern(r'[^"]*')
        self._token('"')

    @graken()
    def _genblock_(self):
        self._token('{')
        self._pattern(r'[.]*')
        self._token('}')

    @graken()
    def _operator_(self):
        self._pattern(r'[\]\:\>\<\=()/]')

    @graken()
    def _expr_(self):
        self._token('(')

        def block0():
            self._keyword_()
        self._closure(block0)
        self._token(')')

    @graken()
    def _ipparm_(self):
        with self._choice():
            with self._option():
                self._net_()
            with self._option():
                self._ip_()
            self._error('no available options')

    @graken()
    def _ipport_(self):
        self._ip_()
        self.ast['ip'] = self.last_node
        self._token(':')
        self._name_()
        self.ast['port'] = self.last_node

        self.ast._define(
            ['ip', 'port'],
            []
        )

    @graken()
    def _whatever_(self):
        self._pattern(r'[^{}\n]*')

    @graken()
    def _qualifier_(self):
        self._pattern(r'[mMkKGg]')

    @graken()
    def _node_(self):
        self._token('node')
        self._ipparm_()
        with self._optional():
            self._block_()

    @graken()
    def _nat_(self):
        self._token('nat')
        with self._optional():
            self._name_()
        self._token('to')
        with self._optional():
            self._name_()
        with self._optional():
            self._block_()

    @graken()
    def _rule_(self):
        self._token('rule')
        with self._optional():
            self._name_()
        with self._optional():
            self._ruleblock_()

    @graken()
    def _oneconnect_(self):
        self._token('profile oneconnect')
        with self._optional():
            self._name_()
        self.ast['oneconnect_name'] = self.last_node
        with self._optional():
            self._profiledef_()
        self.ast['profiledef'] = self.last_node

        self.ast._define(
            ['oneconnect_name', 'profiledef'],
            []
        )

    @graken()
    def _pooldef_(self):
        self._token('pool')
        self._name_()
        self.ast['pool_name'] = self.last_node
        with self._optional():
            self._pblock_()
        self.ast['pool_def'] = self.last_node

        self.ast._define(
            ['pool_name', 'pool_def'],
            []
        )

    @graken()
    def _vip_(self):
        self._token('virtual')
        with self._optional():
            self._name_()
        self.ast['vip_name'] = self.last_node
        with self._optional():
            self._vip_block_()
        self.ast['vip_block'] = self.last_node

        self.ast._define(
            ['vip_name', 'vip_block'],
            []
        )

    @graken()
    def _vipdefault_(self):
        self._token('virtual address any')

        def block0():
            self._block_()
        self._closure(block0)

    @graken()
    def _maxsize_(self):
        self._token('max size')
        self._integer_()
        self.ast['size'] = self.last_node
        with self._optional():
            self._qualifier_()
        self.ast['q'] = self.last_node

        self.ast._define(
            ['size', 'q'],
            []
        )

    @graken()
    def _defaults_(self):
        self._token('defaults from')
        with self._optional():
            self._name_()
        self.ast['from_'] = self.last_node

        self.ast._define(
            ['from'],
            []
        )

    @graken()
    def _profiledef_(self):
        self._token('{')

        def block0():
            self._profile_def_cmd_()
        self._closure(block0)
        self._token('}')

    @graken()
    def _profile_def_cmd_(self):
        with self._choice():
            with self._option():
                self._defaults_()
                self.ast['defaults'] = self.last_node
            with self._option():
                self._maxsize_()
                self.ast['maxsize'] = self.last_node
            with self._option():
                self._whatever_()
            self._error('no available options')

        self.ast._define(
            ['defaults', 'maxsize'],
            []
        )

    @graken()
    def _generic_command_(self):
        self._whatever_()

        def block0():
            self._whatever_()
        self._closure(block0)

        def block1():
            self._ruleblock_()
        self._closure(block1)

    @graken()
    def _commands_(self):
        with self._choice():
            with self._option():
                self._pooldef_()
                self.ast['pool'] = self.last_node
            with self._option():
                self._vip_()
                self.ast['vip'] = self.last_node
            with self._option():
                self._oneconnect_()
                self.ast['oneconnect'] = self.last_node
            with self._option():
                self._generic_command_()
            self._error('no available options')

        self.ast._define(
            ['pool', 'vip', 'oneconnect'],
            []
        )

    @graken()
    def _rulecmd_(self):
        self._whatever_()
        with self._optional():
            self._ruleblock_()

    @graken()
    def _poolcmd_(self):
        with self._choice():
            with self._option():
                self._members_()
                self.ast['cmd'] = self.last_node
            with self._option():
                self._whatever_()
            self._error('no available options')

        self.ast._define(
            ['cmd'],
            []
        )

    @graken()
    def _pool_call_(self):
        self._token('pool')
        self._name_()
        self.ast['pool'] = self.last_node

        self.ast._define(
            ['pool'],
            []
        )

    @graken()
    def _dest_(self):
        self._token('destination')
        self._ipport_()
        self.ast['ipport'] = self.last_node

        self.ast._define(
            ['ipport'],
            []
        )

    @graken()
    def _vip_profiles_(self):
        self._token('profiles')
        with self._optional():
            self._profile_block_()

    @graken()
    def _profile_call_(self):
        self._whatever_()
        self.ast.setlist('profile', self.last_node)
        with self._optional():
            self._profile_block_parm_()

        self.ast._define(
            [],
            ['profile']
        )

    @graken()
    def _profile_block_(self):
        self._token('{')

        def block0():
            self._profile_call_()
        self._closure(block0)
        self._token('}')

    @graken()
    def _profile_block_parm_(self):
        self._token('{')

        def block0():
            self._whatever_()
        self._closure(block0)
        self._token('}')

    @graken()
    def _vipcmd_(self):
        with self._choice():
            with self._option():
                self._pool_call_()
                self.ast['pool_call'] = self.last_node
            with self._option():
                self._dest_()
                self.ast['dest'] = self.last_node
            with self._option():
                self._vip_profiles_()
                self.ast['profiles'] = self.last_node
            with self._option():
                self._rulecmd_()
            with self._option():
                self._whatever_()
            self._error('no available options')

        self.ast._define(
            ['pool_call', 'dest', 'profiles'],
            []
        )

    @graken()
    def _member_(self):
        self._ipport_()
        self.ast.setlist('member_data', self.last_node)
        with self._optional():
            self._mblock_parm_()

        self.ast._define(
            [],
            ['member_data']
        )

    @graken()
    def _mblock_parm_(self):
        self._token('{')
        with self._optional():
            self._keyword_()

        def block0():
            self._name_()
        self._closure(block0)
        self._token('}')

    @graken()
    def _mblock_(self):
        self._token('{')

        def block0():
            self._member_()
            self.ast['member'] = self.last_node
        self._closure(block0)
        self._token('}')

        self.ast._define(
            ['member'],
            []
        )

    @graken()
    def _members_(self):
        self._token('members')
        with self._optional():
            self._member_()
        self.ast['members'] = self.last_node
        with self._optional():
            self._mblock_()
        self.ast['members'] = self.last_node

        self.ast._define(
            ['members'],
            []
        )

    @graken()
    def _pblock_(self):
        self._token('{')

        def block0():
            self._poolcmd_()
        self._closure(block0)
        self._token('}')

    @graken()
    def _block_(self):
        self._token('{')

        def block0():
            self._generic_command_()
        self._closure(block0)
        self._token('}')

    @graken()
    def _ruleblock_(self):
        self._token('{')

        def block0():
            self._rulecmd_()
        self._closure(block0)
        self._token('}')

    @graken()
    def _vip_block_(self):
        self._token('{')

        def block0():
            self._vipcmd_()
        self._closure(block0)
        self._token('}')

    @graken()
    def _file_(self):

        def block1():
            self._commands_()
        self._closure(block1)
        self.ast['@'] = self.last_node


class F5confSemantics(object):
    def keyword(self, ast):
        return ast

    def name(self, ast):
        return ast

    def ip(self, ast):
        return ast

    def net(self, ast):
        return ast

    def integer(self, ast):
        return ast

    def port(self, ast):
        return ast

    def param(self, ast):
        return ast

    def string(self, ast):
        return ast

    def genblock(self, ast):
        return ast

    def operator(self, ast):
        return ast

    def expr(self, ast):
        return ast

    def ipparm(self, ast):
        return ast

    def ipport(self, ast):
        return ast

    def whatever(self, ast):
        return ast

    def qualifier(self, ast):
        return ast

    def node(self, ast):
        return ast

    def nat(self, ast):
        return ast

    def rule(self, ast):
        return ast

    def oneconnect(self, ast):
        return ast

    def pooldef(self, ast):
        return ast

    def vip(self, ast):
        return ast

    def vipdefault(self, ast):
        return ast

    def maxsize(self, ast):
        return ast

    def defaults(self, ast):
        return ast

    def profiledef(self, ast):
        return ast

    def profile_def_cmd(self, ast):
        return ast

    def generic_command(self, ast):
        return ast

    def commands(self, ast):
        return ast

    def rulecmd(self, ast):
        return ast

    def poolcmd(self, ast):
        return ast

    def pool_call(self, ast):
        return ast

    def dest(self, ast):
        return ast

    def vip_profiles(self, ast):
        return ast

    def profile_call(self, ast):
        return ast

    def profile_block(self, ast):
        return ast

    def profile_block_parm(self, ast):
        return ast

    def vipcmd(self, ast):
        return ast

    def member(self, ast):
        return ast

    def mblock_parm(self, ast):
        return ast

    def mblock(self, ast):
        return ast

    def members(self, ast):
        return ast

    def pblock(self, ast):
        return ast

    def block(self, ast):
        return ast

    def ruleblock(self, ast):
        return ast

    def vip_block(self, ast):
        return ast

    def file(self, ast):
        return ast


def main(filename, startrule, trace=False, whitespace=None, nameguard=None):
    import json
    with open(filename) as f:
        text = f.read()
    parser = F5confParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace,
        nameguard=nameguard)
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()

if __name__ == '__main__':
    import argparse
    import string
    import sys

    class ListRules(argparse.Action):
        def __call__(self, parser, namespace, values, option_string):
            print('Rules:')
            for r in F5confParser.rule_list():
                print(r)
            print()
            sys.exit(0)

    parser = argparse.ArgumentParser(description="Simple parser for F5conf.")
    parser.add_argument('-l', '--list', action=ListRules, nargs=0,
                        help="list all rules and exit")
    parser.add_argument('-n', '--no-nameguard', action='store_true',
                        dest='no_nameguard',
                        help="disable the 'nameguard' feature")
    parser.add_argument('-t', '--trace', action='store_true',
                        help="output trace information")
    parser.add_argument('-w', '--whitespace', type=str, default=string.whitespace,
                        help="whitespace specification")
    parser.add_argument('file', metavar="FILE", help="the input file to parse")
    parser.add_argument('startrule', metavar="STARTRULE",
                        help="the start rule for parsing")
    args = parser.parse_args()

    main(
        args.file,
        args.startrule,
        trace=args.trace,
        whitespace=args.whitespace,
        nameguard=not args.no_nameguard
    )
